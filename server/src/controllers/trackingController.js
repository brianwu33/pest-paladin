const pool = require("../config/db");
const AWS = require("aws-sdk");
const { v4: uuidv4 } = require('uuid');

const s3 = new AWS.S3();

// Generate pre-signed URL for secure image access
const generatePresignedUrl = (imageKey) => {
    return s3.getSignedUrl("getObject", {
      Bucket: process.env.AWS_BUCKET_NAME,
      Key: imageKey,
      Expires: 3600 // URL expires in 1 hour
    });
  };

  // Store tracking metadata in PostgreSQL
  const saveTracking = async (req, res) => {
    try {
      const { timestamp, userID, cameraID, trackings } = req.body;
      const imageKey = req.file.key;
  
      // insert into detections_instance table
      const instanceQuery = `
          INSERT INTO tracking_instance (timestamp, user_id, camera_id, image_key)
          VALUES ($1, $2, $3, $4)
          RETURNING instance_id;
      `;
  
      // detection ID will be auto generated by SQL table, we will get it from the return clause
      const instanceValues = [timestamp, userID, cameraID, imageKey];
      const instanceResult = await pool.query(instanceQuery, instanceValues);
      const instance_id = instanceResult.rows[0].instance_id;
  
      // insert into detections table
      const trackingQuery = `INSERT INTO trackings (instance_id, x_min, x_max, y_min, y_max, class, species, confidence) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`
      for (const tracking of JSON.parse(detections)){
          const trackingValues = [instance_id, tracking.x_min, tracking.x_max, tracking.y_min, tracking.y_max, tracking.class, tracking.species, tracking.confidence]
          const detectionResult = await pool.query(trackingQuery, trackingValues);
      }
  
      res.json({ message: 'Upload successful', data: instanceResult.rows[0] });
  
    } catch (error) {
      console.error("Error saving detection instance:", error);
      res.status(500).json({ error: "Failed to save detection" });
    }
  };
  
  // Fetch all object tracking data (Includes pre-signed image URLs)
  const getAllTrackings = async (req, res) => {
      try {
        const query = `
            SELECT * FROM tracking_instance 
            ORDER BY timestamplist[1] DESC
        `;
        const result = await pool.query(query);
    
        // Attach pre-signed URLs to each tracking record
        const processedTrackings = result.rows.map(row => ({
          ...row,
          imageUrl: generatePresignedUrl(row.image_key) // Add secure image URL
        }));
    
        res.status(200).json(processedTrackings);
      } catch (error) {
        console.error("Error retrieving tracking data:", error);
        res.status(500).json({ error: "Internal Server Error" });
      }
    };
    
    // Get a single tracking by ID
    const getTrackingById = async (req, res) => {
      const { id } = req.params;
      try {
        const result = await db.query(
          "SELECT * FROM tracking_instance WHERE instance_id = $1",
          [id]
        );
    
        if (result.rows.length > 0) {
          const detection = result.rows[0];
          detection.imageUrl = generatePresignedUrl(detection.image_key);
          res.status(200).json(tracking);
        } else {
          res.status(404).json({ error: "Tracking instance not found" });
        }
      } catch (error) {
        console.error("Error retrieving detection data:", error);
        res.status(500).json({ error: "Internal Server Error" });
      }
    };
    
  


  module.exports = {
    saveTracking,
    getAllTrackings,
    getTrackingById,
  };
  